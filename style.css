:root {
	font-family:
		'ヒラギノ丸ゴ ProN W4',
		'Arial Rounded MT Bold',
		ui-rounded,
		'Helvetica Neue',
		Helvetica,
		Arial,
		'ヒラギノ角ゴ Pro W4',
		'Hiragino Kaku Gothic Pro',
		'メイリオ',
		'Meiryo',
		sans-serif;
	background-color: var(--background-color);
	color: var(--color);
	--background-color: #FFF;
	--color: #000;
	--border-color: #000;
	--active-filter-background-color: #0FF;
	--active-filter-border-color: #008080;
	--disabled-button-color: #6d6d6d;
	--disabled-button-background-color: #c0c0c0;
	--translucent-background-color: #FFF4;
	--margin-unit: 8px;
	--border-width: 1px;
	--hamburger-length: 50px;
	--drawer-width: 100vw;
	--event-width: 100vw;
}

@supports not ((backdrop-filter: blur(5px)) or (-webkit-backdrop-filter: blur(5px))) {
	:root {
		--translucent-background-color: #FFFC;
	}
}

@media (prefers-contrast: more) {
	:root {
		--disabled-button-color: #000;
	}
}

@media (prefers-color-scheme: dark) {
	:root {
		--background-color: #000;
		--color: #FFF;
		--border-color: #2F3336;
		/* --active-filter-background-color: TODO; */
		/* --active-filter-border-color: TODO; */
		--disabled-button-color: #c0c0c0;
		--disabled-button-background-color: #404040;
		--translucent-background-color: #0004;
	}

	@supports not ((backdrop-filter: blur(5px)) or (-webkit-backdrop-filter: blur(5px))) {
		:root {
			--translucent-background-color: #000C;
		}
	}

	a {
		color: #0FF;
	}

	@media (prefers-contrast: more) {
		:root {
			--border-color: #FFF;
		}
	}
}

/* Same font as the header of KemoV's official website. */
@font-face {
	font-family: NikumaruFontEn;
	src:
		local('07にくまるフォント'),
		url('NikumaruFont.en.woff2') format('woff2');
}

@font-face {
	font-family: NikumaruFontJa;
	src:
		local('07にくまるフォント'),
		url('NikumaruFont.ja.woff2') format('woff2');
}

[hidden] {
	display: none !important;
}

body {
	margin: 0;
}

/* We are going to use the elements for semantics, so reset the default styles. */
h1, h2, h3, h4, h5, h6 {
	font-size: initial;
	margin: initial;
}

li {
	display: block;
}

.unstyle:where(button) {
	appearance: none;
	border: none;
	color: inherit;
	background: inherit;
	font-family: inherit;
}

hr {
	border: none;
	border-top: solid var(--border-width) var(--border-color);
}

/* `<input>` is difficult to style, so hide it and style the preceding `<label>` instead. */
.hamburger-checkbox, .filter-checkbox {
	display: none;
}

.app-title {
	display: flex;
	justify-content: center;
	margin-left: calc(var(--hamburger-length) + 2 * var(--border-width));
	border-top: solid var(--border-width) var(--border-color);
	border-bottom: solid var(--border-width) var(--border-color);
	height: var(--hamburger-length);
}

.app-title:lang(en) {
	font-family: NikumaruFontEn, sans-serif;
}

.app-title > h1 {
	align-self: center;
}

.lang-confirmed .app-title:lang(ja) {
	font-family: NikumaruFontJa, sans-serif;
}

/* Drawer widget */

.hamburger-label {
	position: fixed;
	z-index: 3; /* Put it above `.drawer`. */
	width: var(--hamburger-length);
	height: var(--hamburger-length);
	border: var(--border-width) solid var(--border-color);
	cursor: pointer;
	background-color: var(--background-color);
	stroke: var(--color);
}

.hamburger-label.filter-active {
	background-color: var(--active-filter-background-color);
}

.hamburger-checkbox:checked ~ .hamburger-label {
	/* XXX: On Gecko, the `blur(...)` filter on `.primary-window` ignores fixed state of backdrop
	 * elements. */
	position: fixed;
}

@media print {
	.hamburger-label {
		visibility: hidden;
	}
}

.drawer {
	position: fixed;
	z-index: 2; /* Put it above the main content and `.date-heading`. */
	top: 0;
	border-right: solid var(--border-width) var(--border-color);
	width: var(--drawer-width);
	height: 100vh;
	/* XXX: On desktop, the user agent may _always_ render the scroll bar, covering a portion of the
	 * drawer content when it is collapsed. */
	overflow-y: scroll;
	overscroll-behavior-y: contain;
	/* Hide the drawer visually, but not from screen readers, since the whole point of a drawer
	 * widget is to save display space, which is irrelevant to screen reader users. */
	left: calc(-1 * var(--drawer-width) - var(--border-width) - 2 * var(--margin-unit));
	transition: left .3s;
	/* XXX: Should we include `user-select: none` here? That would improve experience for
	 * sighted users a bit, but might be confusing for screen reader users. */
}

.hamburger-checkbox:checked ~ .drawer, .drawer-container:focus-within {
	left: 0;
}

@media (prefers-reduced-motion) {
	/* Use a dissolving animation. */
	/* XXX: This causes a discontinuity as `z-index` crosses `0`. */
	.drawer {
		left: 0;
		z-index: -2;
		opacity: 0;
		transition-property: z-index,opacity;
	}

	.hamburger-checkbox:checked ~ .drawer, .drawer-container:focus-within {
		z-index: 2;
		opacity: 1;
	}
}

.filter-menu {
	display: flex;
	flex-direction: column;
	margin: initial;
	padding: initial;
	padding-top: calc(2 * var(--border-width) + var(--hamburger-length));
	width: var(--drawer-width);
	min-height: calc(100vh - 2 * var(--border-width) - var(--hamburger-length));
	background-color: var(--background-color);
}

.filter-menu > li {
	margin-top: var(--margin-unit);
}

.filter-menu > li:last-child {
	margin-bottom: var(--margin-unit);
}

.filter-item {
	margin-top: var(--margin-unit);
	margin-bottom: var(--margin-unit);
}

.filter-menu > hr {
	width: 100%;
}

.icon {
	stroke-linecap: round;
}

.drawer-labelled-button {
	display: flex;
	padding: 0;
	width: 100%;
	height: calc(var(--hamburger-length) + var(--border-width));
	text-align: left;
	font-size: inherit;
}

.drawer-labelled-button > .avatar {
	flex-shrink: 0;
}

.avatar {
	border-radius: 50%;
}

.drawer-icon {
	width: calc(var(--border-width) + var(--hamburger-length));
	height: calc(var(--border-width) + var(--hamburger-length));
}

.drawer-button-label {
	align-self: center;
	margin-left: var(--margin-unit);
	overflow: hidden;
	white-space: nowrap;
	text-overflow: ellipsis;
}

.filter-clear-button {
	appearance: none;
	cursor: pointer;
	fill: var(--active-filter-background-color);
	stroke: currentColor;
}

.filter-clear-button:disabled {
	cursor: default;
	fill: var(--disabled-button-background-color);
	stroke: var(--disabled-button-color);
}

.filter-clear-button:disabled > .drawer-button-label {
	opacity: .2;
}

.search-label {
	display: flex;
}

.search-label > svg {
	cursor: pointer;
	fill: var(--background-color);
	stroke: currentColor;
}

.search-label > .search-container {
	align-self: center;
	margin-left: var(--margin-unit);
}

.filter-button:not(:disabled) {
	cursor: pointer;
}

.filter-button[aria-checked="false"], .filter-button:disabled {
	opacity: .2;
}

.feed-filter {
	flex-grow: 1;
}

.feed-filter > ul {
	padding: initial;
}

.about-button {
	cursor: pointer;
	fill: var(--background-color);
	stroke: currentColor;
}

.timeline {
	margin: initial;
	padding: initial;
}

.timeline > li {
	display: inline-block;
}

.date-heading {
	position: sticky;
	z-index: 1; /* Put it above `.event-thumbnail-container`. */
	top: 0;
	left: var(--drawer-width);
	width: 100%;
	text-align: center;
	background-color: var(--background-color);
	border-bottom: solid var(--border-width) var(--border-color);
	break-after: avoid-page;
}

.now {
	margin-top: var(--margin-unit);
	margin-bottom: var(--margin-unit);
	border-top: solid var(--border-width) var(--border-color);
	border-bottom: solid var(--border-width) var(--border-color);
	text-align: center;
}

/* Animate the time separator to indicate that the time is dynamically updated. */
.flashing-time .time-separator {
	animation: 2s flash infinite;
}

@keyframes flash {
	from {
		visibility: visible;
	}
	50% {
		visibility: hidden;
	}
	to {
		visibility: hidden;
	}
}

@media (prefers-reduced-motion) {
	.now-separator .time-separator {
		animation: none;
	}
}

.ongoing {
	background-color: #FF04;
}

.event {
	position: relative;
	width: var(--event-width);
	margin: 0;
	margin-top: calc(-1 * var(--border-width));
	border: solid var(--border-width) var(--border-color);
	border-left: none;
	border-right: none;
	padding-bottom: var(--margin-unit);
	break-inside: avoid;
}

.event-padding {
	padding: var(--margin-unit);
}

.event-header-grid {
	display: grid;
}

.event-thumbnail-container {
	position: relative;
	order: -1;
}

.event-thumbnail {
	display: block;
	width: 100%;
	aspect-ratio: 16 / 9;
}

.event-duration {
	position: absolute;
	right: 0;
	bottom: 0;
	border-top-left-radius: 5px;
	padding-left: calc(var(--margin-unit) / 2);
	background-color: var(--translucent-background-color);
	backdrop-filter: blur(5px);
	-webkit-backdrop-filter: blur(5px);
	color: var(--color);
}

.duration {
	position: absolute;
	right: 0;
	bottom: 0;
}

.event-members {
	padding-left: var(--margin-unit);
	padding-right: var(--margin-unit);
	height: 60px;
	overflow-x: scroll;
	white-space: nowrap;
}

.event-members .avatar {
	display: block;
	width: 60px;
	height: 60px;
}

.event-member {
	display: inline-block;
	margin-left: var(--margin-unit);
}

.event-member:first-child {
	margin-left: 0;
}

.popup-container {
	position: absolute;
	top: var(--margin-unit);
	right: var(--margin-unit);
}

.popup-toggle {
	cursor: pointer;
}

.popup {
	position: absolute;
	z-index: 3; /* Put it above everything else except the modal dialog. */
	right: 0;
	padding: initial;
	width: max-content;
	background-color: var(--background-color);
	border: solid var(--border-width) var(--border-color);
}

.popup-toggle[aria-expanded="false"] ~ .popup {
	display: none;
}

.popup button {
	cursor: pointer;
	padding-top: var(--margin-unit);
	padding-bottom: var(--margin-unit);
	width: 100%;
	text-align: initial;
}

.empty-result {
	text-align: center;
}

.load-more-feed {
	display: flex;
	flex-direction: column;
	justify-content: center;
	height: var(--hamburger-length);
	text-align: center;
}

.load-more-feed-button {
	width: 100%;
	height: 100%;
	font-size: initial;
}

.social-icon {
	vertical-align: middle;
	width: 2em;
	height: 2em;
	fill: currentColor;
}

.error-log {
	position: sticky;
	bottom: 0;
	z-index: 1; /* Put it above `.date-heading`. */
	margin: initial;
	padding: initial;
	max-height: calc(100vh - 260px);
	min-height: 2em;
	overflow: scroll;
	background-color: red;
	color: white;
	font-family:
		'Helvetica Neue',
		'ヒラギノ角ゴ Pro W4',
		'Hiragino Kaku Gothic Pro',
		'メイリオ',
		'Meiryo',
		sans-serif;
}

.error-log > li {
	margin: var(--margin-unit);
}

.error-log a {
	color: #0FF;
}

.dismiss-error {
	float: right;
	border-radius: 5px;
	color: #000;
	background-color: #FFF;
}

.modal-backdrop {
	position: fixed;
	top: 0;
	left: 0;
	z-index: 4; /* Put it above everything else. */
	margin: 0;
	border: none;
	width: 100vw;
	max-width: initial;
	height: 100vh;
	max-height: initial;
	padding: 0;
	background-color: var(--background-color);
	overscroll-behavior-x: none;
	overscroll-behavior-y: contain;
}

.modal-backdrop:not([open]) {
	display: none;
}

.modal-backdrop[open] ~ .primary-window {
	filter: blur(5px);
}

.modal {
	display: flex;
	flex-direction: column;
	align-self: center;
	background-color: var(--background-color);
	color: var(--color);
}

.about li {
	display: list-item;
}

.dialog-title-bar {
	display: flex;
	border-bottom: solid var(--border-width) var(--border-color);
	padding: calc(2 * var(--margin-unit));
	padding-top: 0;
	padding-bottom: 0;
	height: var(--hamburger-length);
	flex-shrink: 0;
}

.dialog-title-bar-button{
	width: 2em;
	height: 2em;
	align-self: center;
	cursor: pointer;
	stroke: currentColor;
}

.modal-back-button:disabled {
	visibility: hidden;
}

.dialog-title {
	flex-grow: 1;
	align-self: center;
	text-align: center;
}

.dialog-content {
	padding: calc(2 * var(--margin-unit));
	padding-top: 0;
	overflow-y: scroll;
}

.copyright-loading {
	margin: auto;
}

.copying-error {
	color: red;
}

.copying blockquote p {
	white-space: pre-wrap;
}

.kbd-help-dl {
	display: grid;
}

.kbd-help-dl > dt {
	grid-column: 1;
}

.kbd-help-dl > dd {
	grid-column: 2;
}

/* Always show icons in the drawer. */
@media (min-width: 480px) {
	:root {
		--drawer-width: 240px;
		--event-width: calc(100vw - 2 * var(--border-width) - var(--hamburger-length));
	}

	.hamburger-label.filter-active {
		background-color: var(--background-color);
	}

	.drawer {
		/* Use `initial` rather than `0` to prevent `transition` animation to trigger when shrinking
		 * the viewport width. */
		/* XXX: The animation of `.drawer-right` still triggers. */
		left: initial;
		/* Visually hide labels and the search input inside it by default. */
		width: calc(var(--hamburger-length) + var(--border-width));
		overflow-x: hidden;
		transition: width .3s;
	}

	.hamburger-checkbox:checked ~ .drawer,
	/* We want the drawer to open when the search input is focused, but using `:focus-within` here
	 * would cause the drawer to open when a feed filter button is clicked too.
	 * So we are using `.search-focused` class, which is set by Elm when the input is focused. */
	.search-focused ~ .drawer {
		/* Show the labels and input. */
		width: var(--drawer-width);
	}

	.drawer-right {
		margin-left: calc(var(--hamburger-length) + var(--border-width));
		border-left: solid var(--border-width) var(--border-color);
		transition: margin-left .3s;
	}

	.hamburger-checkbox:checked ~ .drawer-right, .search-focused ~ .drawer-right {
		margin-left: var(--drawer-width);
	}

	.timeline {
		/* This is fine since overflow would only occur when the drawer is expanded. */
		overflow-inline: hidden;
	}

	@media (prefers-reduced-motion) {
		/* TODO: Find a better animation. */
		.drawer {
			transition: none;
			/* Revert rules in the previous `@media (prefers-reduced-motion)`. */
			z-index: 2;
			opacity: 1;
		}

		.drawer-right {
			transition: none;
		}
	}
}

/* Make the modal dialog smaller. */
@media (min-width: 600px) {
	.modal-backdrop {
		display: flex;
		align-items: center;
		justify-content: center;
		background: none;
	}

	.modal {
		width: fit-content;
		min-width: 480px;
		max-width: calc(100vw - 12 * var(--margin-unit));
		height: fit-content;
		max-height: calc(100vh - 12 * var(--margin-unit));
		border: solid var(--border-width) var(--border-color);
		border-radius: 10px;
	}
}

/* Accomodate multiple events in each row of `.timeline` if the viewport is capable of it. */
@media (min-width: 680px) {
	:root {
		--event-width: 280px;
	}

	.event {
		vertical-align: top;
		margin: calc(2 * var(--margin-unit));
		border: solid var(--border-width) var(--border-color);
	}

	.popup {
		/* TODO: Prevent the popup to shrink when the ellipsis is on far right of the viewport. */
		right: auto;
	}
}
