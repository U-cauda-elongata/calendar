@import 'light.css' not (prefers-color-scheme: dark);
@import 'dark.css' (prefers-color-scheme: dark);

:root {
	font-family:
		'ヒラギノ丸ゴ ProN W4',
		'Arial Rounded MT Bold',
		ui-rounded,
		'Helvetica Neue',
		Helvetica,
		Arial,
		'ヒラギノ角ゴ Pro W4',
		'Hiragino Kaku Gothic Pro',
		'メイリオ',
		Meiryo,
		sans-serif;
	background-color: var(--background-color);
	color: var(--color);
	--active-filter-background-color: #0FF;
	--active-filter-border-color: #008080;
	--margin-unit: 8px;
	--border-width: 1px;
	--hamburger-length: 50px;
	--drawer-width: 100vw;
	--event-width: 100vw;
}

@media (prefers-contrast: more) {
	:root {
		--translucent-background-color: var(--background-color);
	}
}

/* Same font as the header of KemoV's official website. */
@font-face {
	font-family: NikumaruFontEn;
	src:
		local('07にくまるフォント'),
		url('NikumaruFont.en.woff2') format('woff2');
}

@font-face {
	font-family: NikumaruFontJa;
	src:
		local('07にくまるフォント'),
		url('NikumaruFont.ja.woff2') format('woff2');
}

[hidden] {
	display: none !important;
}

body {
	margin: 0;
}

/* We are going to use the elements for semantics, so reset the default styles. */
h1, h2, h3, h4, h5, h6 {
	font-size: initial;
	margin: initial;
}

li {
	display: block;
}

/* Sometimes we want to use the default style, and sometimes not.
 * Use the `unstyle` class to opt out of the default style in such cases. */
.unstyle:where(button) {
	appearance: none;
	border: none;
	color: inherit;
	background: inherit;
	font-family: inherit;
}

.unstyle:where(menu, ol, ul) {
	margin: initial;
	padding: initial;
}

hr {
	border: none;
	border-top: solid var(--border-width) var(--border-color);
}

.wide-viewport {
	display: none;
}

.fine-pointer {
	display: none;
}

@media (pointer: fine) {
	.fine-pointer {
		display: unset;
	}

	.no-fine-pointer {
		display: none;
	}
}

.primary-window {
	display: flex;
	flex-direction: column;
	height: 100vh;
}

.app-title {
	display: flex;
	align-items: center;
	justify-content: center;
	flex-shrink: 0;
	margin-left: calc(var(--hamburger-length) + 2 * var(--border-width));
	border: solid var(--border-width) var(--border-color);
	border-left: none;
	height: var(--hamburger-length);
}

.app-title:lang(en) {
	font-family: NikumaruFontEn, sans-serif;
}

.lang-confirmed .app-title:lang(ja) {
	font-family: NikumaruFontJa, sans-serif;
}

/* Drawer widget */

.hamburger {
	position: fixed;
	top: 0;
	left: 0;
	z-index: 3; /* Put it above `.drawer`. */
	box-sizing: initial;
	padding: initial;
	width: var(--hamburger-length);
	height: var(--hamburger-length);
	border: var(--border-width) solid var(--border-color);
	cursor: pointer;
	background-color: var(--background-color);
	stroke: var(--color);
}

.drawer-button-label {
	overflow: hidden;
	white-space: nowrap;
	text-overflow: ellipsis;
}

.drawer-labelled-button:is([aria-checked="false"], :disabled) .drawer-button-label {
	color: var(--disabled-button-color);
}

.hamburger-label {
	margin-left: calc(2 * var(--border-width) + var(--hamburger-length) + var(--margin-unit));
}

.hamburger.filter-active {
	background-color: var(--active-filter-background-color);
}

.drawer {
	position: fixed;
	z-index: 2; /* Put it above the main content and `.date-heading`. */
	top: 0;
	border-right: solid var(--border-width) var(--border-color);
	width: var(--drawer-width);
	height: 100vh;
	/* XXX: On desktop, the user agent may _always_ render the scroll bar, covering a portion of the
	 * drawer content when it is collapsed. */
	overflow-y: scroll;
	overscroll-behavior-y: contain;
	background-color: var(--background-color);
	/* Hide the drawer visually, but not from screen readers, since the whole point of a drawer
	 * widget is to save display space, which is irrelevant to screen reader users. */
	left: calc(-1 * var(--drawer-width) - var(--border-width) - 2 * var(--margin-unit));
	transition: left .2s;
	/* XXX: Should we include `user-select: none` here? That would improve experience for
	 * sighted users a bit, but might be confusing for screen reader users. */
}

.drawer-expanded > .drawer, .drawer:focus-within {
	left: 0;
}

@media (prefers-reduced-motion) {
	/* Use a dissolving animation. */
	/* XXX: This causes a discontinuity as `z-index` crosses `0`. */
	.drawer {
		left: 0;
		z-index: -2;
		opacity: 0;
		transition-property: z-index,opacity;
	}

	.drawer-expanded >  .drawer, .drawer-container:focus-within {
		z-index: 2;
		opacity: 1;
	}
}

.drawer-menu {
	display: flex;
	flex-direction: column;
	margin: initial;
	width: var(--drawer-width);
	min-height: 100vh;
}

.drawer-menu > li {
	margin-top: var(--margin-unit);
}

.drawer-menu > li:last-child {
	margin-bottom: var(--margin-unit);
}

.drawer-menu > hr {
	width: 100%;
}

.icon {
	stroke-linecap: round;
}

.drawer-labelled-button {
	display: flex;
	align-items: center;
	padding: 0;
	width: 100%;
	height: calc(var(--hamburger-length) + var(--border-width));
	text-align: left;
	font-size: inherit;
}

.drawer-labelled-button:not(:disabled) {
	cursor: pointer;
}

.drawer-icon {
	flex-shrink: 0;
	margin-right: var(--margin-unit);
	width: calc(var(--border-width) + var(--hamburger-length));
	height: calc(var(--border-width) + var(--hamburger-length));
	overflow: hidden;
}

.avatar {
	border-radius: 50%;
	overflow: hidden;
	white-space: normal;
}

@media (prefers-contrast: more) {
	.drawer-icon.avatar {
		box-sizing: border-box;
		border: solid var(--border-width) var(--border-color);
	}
}

.filter-clear-button {
	appearance: none;
	fill: var(--active-filter-background-color);
	stroke: currentColor;
}

.filter-clear-button:disabled {
	fill: var(--disabled-button-fill);
	stroke: var(--disabled-button-stroke);
}

.search-label {
	display: flex;
	align-items: center;
}

.search-label > svg {
	cursor: pointer;
	fill: var(--background-color);
	stroke: currentColor;
}

.filter-button .avatar > img {
	width: 100%;
	height: 100%;
}

.filter-button[aria-checked="false"] .avatar > img {
	opacity: .4
}

.feed-filter {
	flex-grow: 1;
}

.feed-filter > ul {
	padding: initial;
}

.feed-filter > ul > li {
	margin: var(--margin-unit) 0;
}

.about-button {
	fill: var(--background-color);
	stroke: currentColor;
}

.main-container {
	display: flex;
	flex-direction: column;
	flex-grow: 1;
}

main {
	display: flex;
	flex-direction: column;
	flex-grow: 1;
}

.timeline > li {
	display: inline-block;
}

.date-heading {
	position: sticky;
	z-index: 1; /* Put it above `.event-thumbnail-container`. */
	top: 0;
	text-align: center;
	background-color: var(--background-color);
	border-bottom: solid var(--border-width) var(--border-color);
	break-after: avoid-page;
}

.now {
	margin: var(--margin-unit) 0;
	border-top: solid var(--border-width) var(--border-color);
	border-bottom: solid var(--border-width) var(--border-color);
	text-align: center;
}

/* Animate the time separator to indicate that the time is dynamically updated. */
/*
 * Note on accessibility concerns:
 *
 * Yes, this is the condemned [^1] flash effect. However, I think this is fine because the animation
 * is far below the threshold of unacceptable flashes as specified by WCAG 2.1 [^2], both in terms
 * of frequency and of occupied area of visual field.
 *
 * Also, the animation is disabled if `prefers-reduced-motion` media feature is enabled.
 *
 * [^1]: <https://developer.mozilla.org/en-US/docs/Web/HTML/Element/blink>
 * [^2]: <https://www.w3.org/TR/WCAG21/#dfn-general-flash-and-red-flash-thresholds>
 */
.flashing-time .time-separator {
	animation: 2s flash infinite;
}

@keyframes flash {
	from {
		/* Animate `opacity` instead of `visibility`
		 * to prevent screen readers from announcing the change when focused. */
		opacity: 1;
	}
	49.99999% {
		opacity: 1;
	}
	50% {
		opacity: 0;
	}
	to {
		opacity: 0;
	}
}

@media (prefers-reduced-motion) {
	.flashing-time .time-separator {
		animation: none;
	}
}

.ongoing {
	background-color: #FF04;
}

.event {
	position: relative;
	width: var(--event-width);
	margin-top: calc(-1 * var(--border-width));
	border: solid var(--border-width) var(--border-color);
	border-left: none;
	border-right: none;
	padding-bottom: var(--margin-unit);
	break-inside: avoid;
}

.event-padding {
	padding: var(--margin-unit);
}

.event-header-grid {
	display: grid;
}

.event-thumbnail-container {
	position: relative;
	order: -1;
}

.event-thumbnail {
	display: block;
	width: 100%;
	aspect-ratio: 16 / 9;
}

.event-duration {
	position: absolute;
	inset: auto 0 0 auto;
	border-top-left-radius: 5px;
	padding: 0 calc(var(--margin-unit) / 2);
	background-color: var(--translucent-background-color);
	-webkit-backdrop-filter: blur(5px);
	backdrop-filter: blur(5px);
	color: var(--color);
}

@media (prefers-contrast: more) {
	.event-duration {
		-webkit-backdrop-filter: none;
		backdrop-filter: none;
	}
}

.event-members {
	display: flex;
	padding: 0 var(--margin-unit);
	height: 60px;
	overflow-x: scroll;
	white-space: nowrap;
}

.event-members .avatar {
	display: block;
	width: 60px;
	height: 60px;
}

.event-member {
	margin-left: var(--margin-unit);
}

.event-member:first-child {
	margin-left: 0;
}

.popup-container {
	position: absolute;
	inset: var(--margin-unit) var(--margin-unit) auto auto;
}

.popup-toggle {
	cursor: pointer;
}

.popup-backdrop-button {
	position: fixed;
	z-index: 3;
	inset: 0;
	outline-offset: -3px;
	padding: initial;
	width: 100vw;
	height: 100vh;
	-webkit-backdrop-filter: brightness(.6);
	backdrop-filter: brightness(.6);
}

.popup {
	position: fixed;
	z-index: 3; /* Put it above everything else except the modal dialog. */
	/* TODO: Animate expansion/collapse. */
	inset: auto 0 0 0;
	width: 100vw;
	background-color: var(--background-color);
	border: solid var(--border-width) var(--border-color);
	border-left: none;
	border-right: none;
}

.popup-toggle[aria-expanded="false"] ~ .popup {
	display: none;
}

.popup button {
	cursor: pointer;
	padding: calc(2 * var(--margin-unit));
	width: 100%;
	text-align: initial;
}

.empty-result {
	text-align: center;
}

.flex-padding {
	flex-grow: 1;
}

.load-more-feed {
	display: flex;
	flex-direction: column;
	justify-content: center;
	height: var(--hamburger-length);
	text-align: center;
}

.load-more-feed-button {
	width: 100%;
	height: 100%;
	font-size: initial;
}

.social-icon {
	vertical-align: middle;
	width: 2em;
	height: 2em;
	fill: currentColor;
}

.error-log {
	max-height: calc(100vh - 260px);
	min-height: 2em;
	overflow-y: scroll;
	background-color: red;
	color: white;
	font-family:
		'Helvetica Neue',
		'ヒラギノ角ゴ Pro W4',
		'Hiragino Kaku Gothic Pro',
		'メイリオ',
		'Meiryo',
		sans-serif;
}

.error-log > li {
	margin: var(--margin-unit);
}

.error-log a {
	color: #0FF;
}

.dismiss-error {
	float: right;
	border-radius: 5px;
	color: #000;
	background-color: #FFF;
}

.modal-backdrop {
	position: fixed;
	inset: 0;
	z-index: 4; /* Put it above everything else. */
	border: none;
	width: 100vw;
	max-width: initial;
	height: 100vh;
	max-height: initial;
	padding: 0;
	background-color: var(--background-color);
}

.modal-backdrop:not([open]) {
	display: none;
}

@supports (backdrop-filter: blur(5px)) or (-webkit-backdrop-filter: blur(5px)) {
	.modal-backdrop[open] {
		-webkit-backdrop-filter: blur(5px);
		backdrop-filter: blur(5px);
	}
}

@supports not ((backdrop-filter: blur(5px)) or (-webkit-backdrop-filter: blur(5px))) {
	/* XXX: On Gecko, the filter ignores fixed state of backdrop elements like the drawer, by spec.
	 * <https://stackoverflow.com/a/52937920> */
	.modal-backdrop[open] ~ .primary-window {
		filter: blur(5px);
	}
}

.modal {
	display: flex;
	flex-direction: column;
	height: 100vh;
	background-color: var(--background-color);
	color: var(--color);
}

.about li {
	display: list-item;
}

.about-links {
	display: grid;
	grid-template-columns: auto 1fr;
}

.about-links > dt {
	grid-column: 1;
	display: list-item;
	margin-left: 40px;
}

.about-links > dd {
	grid-column: 1;
}

.dialog-title-bar {
	display: flex;
	align-items: center;
	border-bottom: solid var(--border-width) var(--border-color);
	padding: 0 calc(2 * var(--margin-unit));
	height: var(--hamburger-length);
	flex-shrink: 0;
}

.dialog-title-bar-button {
	padding: initial;
	width: 16px;
	height: 16px;
	cursor: pointer;
	stroke: currentColor;
}

.modal-back-button:disabled {
	visibility: hidden;
}

.dialog-title {
	flex-grow: 1;
	text-align: center;
}

.dialog-content {
	padding: calc(2 * var(--margin-unit));
	padding-top: 0;
	overflow-y: scroll;
	overscroll-behavior: none contain;
}

.modal-backdrop-button {
	position: absolute;
	inset: 0;
	z-index: -1;
	outline-offset: -3px;
	padding: initial;
	width: 100%;
	height: 100%;
	background: none;
}

.copyright-loading {
	margin: auto;
}

.copying-error {
	color: red;
}

.copying blockquote p {
	white-space: pre-wrap;
}

.kbd-help-dl {
	display: grid;
	grid-template-columns: auto 1fr;
}

.kbd-help-dl > dt {
	grid-column: 1;
}

.kbd-help-dl > dd {
	grid-column: 2;
}

@media (min-width: 480px) {
	/* Always show icons in the drawer. */
	:root {
		--drawer-width: 240px;
		--event-width: calc(100vw - 2 * var(--border-width) - var(--hamburger-length));
	}

	.wide-viewport {
		display: unset;
	}

	.narrow-viewport {
		display: none;
	}

	.drawer-expanded {
		--event-width: calc(100vw - 2 (--border-width) - var(--drawer-width));
	}

	.drawer-expanded .wide-viewport {
		display: none;
	}

	.drawer-expanded .narrow-viewport {
		display: unset;
	}

	.hamburger.filter-active {
		background-color: var(--background-color);
	}

	.primary-window > *:not(.hamburger, .drawer) {
		margin-left: calc(var(--hamburger-length) + var(--border-width));
		border-left: solid var(--border-width) var(--border-color);
		transition: margin-left .2s;
	}

	.drawer {
		/* Use `initial` rather than `0` to prevent `transition` animation to trigger when shrinking
		 * the viewport width. */
		/* XXX: The animation still triggers when growing the viewport. */
		left: initial;
		/* Visually hide labels and the search input inside it by default. */
		width: calc(var(--hamburger-length) + var(--border-width));
		overflow-x: hidden;
		transition-property: width;
	}

	.drawer-expanded > .drawer {
		/* Show the labels and input. */
		width: var(--drawer-width);
	}

	.drawer-expanded > *:not(.hamburger, .drawer) {
		margin-left: var(--drawer-width);
	}

	.timeline {
		/* This is fine since overflow would only occur when the drawer is expanded. */
		overflow-x: hidden;
	}

	@media (prefers-reduced-motion) {
		/* TODO: Find a better animation. */
		.drawer {
			transition: none;
			/* Revert rules in the previous `@media (prefers-reduced-motion)`. */
			z-index: 2;
			opacity: 1;
		}

		.hamburger ~ *:not(.hamburger, .drawer) {
			transition: none;
		}
	}

	/* Make the popup float near the allipsis. */
	.popup-backdrop-button {
		display: none;
	}

	.popup {
		position: absolute;
		inset: auto 0 auto auto;
		border: solid var(--border-width) var(--border-color);
		width: max-content;
	}

	.popup button {
		padding: var(--margin-unit);
	}

	/* Show links and descriptions in two columns, which would be too large in mobile viewports. */
	.about-links > dd {
		grid-column: 2;
	}
}

/* Make the modal dialog smaller. */
@media (min-width: 600px) and (min-height: 320px) {
	.modal-backdrop {
		display: flex;
		align-items: center;
		justify-content: center;
		background: none;
	}

	.modal {
		width: fit-content;
		min-width: 480px;
		max-width: calc(100vw - 12 * var(--margin-unit));
		height: fit-content;
		max-height: calc(100vh - 12 * var(--margin-unit));
		border: solid var(--border-width) var(--border-color);
		border-radius: 10px;
	}
}

/* Accomodate multiple events in each row of `.timeline` if the viewport is capable of it. */
@media (min-width: 680px) {
	:root {
		--event-width: 280px;
	}

	.drawer-expanded {
		--event-width: unset;
	}

	.drawer-expanded .wide-viewport {
		display: unset;
	}

	.drawer-expanded .narrow-viewport {
		display: none;
	}

	.timeline > li {
		vertical-align: top;
	}

	.event {
		margin: calc(2 * var(--margin-unit));
		border: solid var(--border-width) var(--border-color);
	}

	.popup {
		/* TODO: Prevent overflowing when the ellipsis is on far right of the viewport. */
		inset: auto;
	}
}
